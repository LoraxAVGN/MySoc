{"version":3,"sources":["StoreContext.jsx","base.js","App.js","index.js"],"names":["React","createContext","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","App","state","allUsers","this","ref","syncState","context","removeBinding","console","log","currentPerson","JSON","parse","localStorage","getItem","currentUser","clickRegisterButton","userName","userEmail","userPassword","userId","Date","valueOf","newPerson","posts","setState","setItem","stringify","clickLoginButton","thisUserEmail","thisUserPassword","users","loginFlag","id","online","flag","alert","onClickTopbarImg","onClickShare","desc","img","location","date","newPost","comment","getMonth","getDate","getFullYear","getHours","getMinutes","like","photo","copyPosts","unshift","onClickDelBut","e","localCurrentPerson","newPosts","splice","currentTarget","getAttribute","onClickLike","onClickInputButton","newText","word","onClickUser","followOnUser","personId","personFollowers","followers","includes","indexOf","onSendClick","message","newMesMy","true","newMesYour","false","mesArrMy","messages","mesArrYour","push","objMesMy","objMesYour","newPersonMy","newPersonYour","allUsersNew","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kqBAEqBA,IAAMC,cAAc,M,8MCCnCC,E,MAAcC,EAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,kFAMFC,EAHFC,IAAOC,YAAYR,EAAYS,YC+N7BC,E,4MA3NXC,MAAQ,CAEJC,SAAU,I,uDAGd,WAEIC,KAAKC,IAAMR,EAAKS,UAAL,iBAAiC,CACxCC,QAASH,KACTF,MAAO,e,kCAIf,WAEIL,EAAKW,cAAcJ,KAAKC,O,gCAG5B,WACII,QAAQC,IAAIN,KAAKF,S,oBAGrB,WAAS,IAAD,OAgKc,2BACXE,KAAKF,OADM,IAEdS,cAAeC,KAAKC,MAAMC,aAAaC,QAAQ,kBAC/CC,YAAaJ,KAAKC,MAAMC,aAAaC,QAAQ,gBAC7CE,oBAlKwB,SAACC,EAAUC,EAAWC,GAAkB,IAAD,EACzDC,GAAS,IAAIC,MAAOC,UACpBC,GAAS,GACXN,SAAUA,EAAUC,UAAWA,EAAWC,aAAcA,EAAcC,OAAQA,EAC9EI,MAAO,IAFI,yBAEU,IAFV,uBAEsB,IAFtB,qBAEgC,IAFhC,wBAE6C,IAF7C,6BAE+D,IAF/D,yBAGD,IAHC,qBAGS,IAHT,wBAGqB,GAHrB,0BAGsC,IAHtC,yBAGoD,IAHpD,GAKTtB,EAAQ,eAAO,EAAKD,MAAMC,UAChCA,EAASkB,GAAUG,EACnB,EAAKE,SAAS,CAACvB,aAEfW,aAAaa,QAAQ,gBAAiBf,KAAKgB,UAAL,eAAmBJ,MAwJzDK,iBArJqB,SAACC,EAAeC,GACrC,IAAMC,EAAQ,EAAK9B,MAAMC,SACrB8B,GAAY,EAChB,IAAK,IAAIC,KAAMF,EAEX,GAAGA,EAAME,GAAN,WAA0BJ,GAAiBE,EAAME,GAAN,cAA6BH,EAAiB,CACxFE,GAAY,EACZ,IAAMtB,EAAa,eAAOqB,EAAME,IAEhCpB,aAAaa,QAAQ,gBAAiBf,KAAKgB,UAAUjB,IACrD,IAAMR,EAAQ,eAAO,EAAKD,MAAMC,UAChCA,EAAS+B,GAAIC,QAAS,EACtBhC,EAAS+B,GAAIE,MAAQjC,EAAS+B,GAAIE,KAClC,EAAKV,SAAS,CAACvB,aACf,MAIL8B,GACCI,MAAM,yHAmIVC,iBA/HqB,WAErB,IACMjB,EADqBT,KAAKC,MAAMC,aAAaC,QAAQ,kBACzBM,OAGlCP,aAAaa,QAAQ,gBAAiBf,KAAKgB,UAFrB,KAGtB,IAAMzB,EAAQ,eAAO,EAAKD,MAAMC,UAChCA,EAASkB,GAAQc,QAAS,EAC1B,EAAKT,SAAS,CAACvB,cAuHfoC,aApHiB,SAACC,EAAMC,EAAKC,GAE7B,IACMrB,EADqBT,KAAKC,MAAMC,aAAaC,QAAQ,kBACzBM,OAC9BsB,EAAO,IAAIrB,KAGTsB,EAAU,CACZC,QAAS,EAAGF,KAFCA,EAAKG,WAAW,EAAG,IAAIH,EAAKI,UAAU,IAAIJ,EAAKK,cAAc,IAAIL,EAAKM,WAAW,IAAIN,EAAKO,aAE5EV,KAAMA,EAAMN,GAAIb,EAAQ8B,KAAM,EACzDC,MAAOX,EAAKpB,OAAQA,EAAQqB,SAAUA,EAAUjB,MAAO,IAEvD4B,EAAY,EAAKnD,MAAMC,SAASkB,GAAQI,MAC5C4B,EAAYA,EAAUC,QAAQV,GAAWS,EAAY,CAACT,GACtD,IAAIzC,EAAQ,eAAO,EAAKD,MAAMC,UAC9BA,EAASkB,GAAQI,MAAQ4B,EACzB,EAAK3B,SAAS,CAACvB,aACf,IAAMQ,EAAgB,EAAKT,MAAMC,SAASkB,GAC1CP,aAAaa,QAAQ,gBAAiBf,KAAKgB,UAAUjB,KAoGrD4C,cAjGkB,SAACC,GACnB,IAAMC,EAAqB7C,KAAKC,MAAMC,aAAaC,QAAQ,kBACrDM,EAASoC,EAAmBpC,OAC9BqC,EAAWD,EAAmBhC,MAClCiC,EAASC,OAAOH,EAAEI,cAAcC,aAAa,SAAU,GACvD,IAAMlD,EAAa,2BAAO8C,GAAP,IAA2BhC,MAAOiC,IACrD5C,aAAaa,QAAQ,gBAAiBf,KAAKgB,UAAUjB,IACrD,IAAMa,EAAS,2BAAO,EAAKtB,MAAMC,SAASkB,IAA3B,IAAoCI,MAAOiC,IACpDvD,EAAQ,2BAAQ,EAAKD,MAAMC,UAAnB,kBAA8BkB,EAASG,IACrD,EAAKE,SAAS,CAACvB,cAyFf2D,YAtFgB,SAACN,EAAGL,GACpB,IAAMM,EAAqB7C,KAAKC,MAAMC,aAAaC,QAAQ,kBACrDM,EAASoC,EAAmBpC,OAC9BqC,EAAWD,EAAmBhC,MAClCiC,EAASF,EAAEI,cAAcC,aAAa,UAAUV,KAAOA,EACvD,IAAMxC,EAAa,2BAAO8C,GAAP,IAA2BhC,MAAOiC,IACrD5C,aAAaa,QAAQ,gBAAiBf,KAAKgB,UAAUjB,IACrD,IAAMa,EAAS,2BAAO,EAAKtB,MAAMC,SAASkB,IAA3B,IAAoCI,MAAOiC,IACpDvD,EAAQ,2BAAQ,EAAKD,MAAMC,UAAnB,kBAA8BkB,EAASG,IACrD,EAAKE,SAAS,CAACvB,cA8Ef4D,mBA3EuB,SAACC,EAASC,GACjC,GAAID,EAAQ,CACR,IAAMP,EAAqB7C,KAAKC,MAAMC,aAAaC,QAAQ,kBACrDM,EAASoC,EAAmBpC,OAC5BV,EAAa,2BAAO8C,GAAP,kBAA4BQ,EAAOD,IACtDlD,aAAaa,QAAQ,gBAAiBf,KAAKgB,UAAUjB,IACrD,IAAMa,EAAS,2BAAO,EAAKtB,MAAMC,SAASkB,IAA3B,kBAAqC4C,EAAOD,IACrD7D,EAAQ,2BAAQ,EAAKD,MAAMC,UAAnB,kBAA8BkB,EAASG,IACrD,EAAKE,SAAS,CAACvB,eAoEnB+D,YAhEgB,SAAChC,GACjB,IAAMlB,EAAW,eAAO,EAAKd,MAAMC,SAAS+B,IAC5CpB,aAAaa,QAAQ,cAAef,KAAKgB,UAAUZ,IACnD,IACMK,EADqBT,KAAKC,MAAMC,aAAaC,QAAQ,kBACzBM,OAC5Be,EAAO,EAAKlC,MAAMC,SAASkB,GAAQe,KACnCZ,EAAS,2BAAO,EAAKtB,MAAMC,SAASkB,IAA3B,IAAoCe,MAAOA,IACpDjC,EAAQ,2BAAQ,EAAKD,MAAMC,UAAnB,kBAA8BkB,EAASG,IACrD,EAAKE,SAAS,CAACvB,cAyDfgE,aAtDiB,WACjB,IACM9C,EADmBT,KAAKC,MAAMC,aAAaC,QAAQ,gBACzBM,OAE1B+C,EADqBxD,KAAKC,MAAMC,aAAaC,QAAQ,kBACvBM,OAChCgD,EAAkB,EAAKnE,MAAMC,SAASiE,GAAUE,WACpDD,EAAkBA,GAAoC,IACtCE,SAASlD,GAAUgD,EAAgBV,OAAOU,EAAgBG,QAAQnD,GAAQ,GAAKgD,EAAgBf,QAAQjC,GACvH,IAAMG,EAAS,2BAAO,EAAKtB,MAAMC,SAASiE,IAA3B,IAAsCE,UAAWD,IAC1DlE,EAAQ,2BAAQ,EAAKD,MAAMC,UAAnB,kBAA8BiE,EAAW5C,IACvDV,aAAaa,QAAQ,gBAAiBf,KAAKgB,UAAUJ,IACrD,EAAKE,SAAS,CAACvB,cA4CfsE,YAzCgB,SAACpD,EAAQqD,GAAa,IAAD,EAE/BN,EADqBxD,KAAKC,MAAMC,aAAaC,QAAQ,kBACvBM,OAC9BsD,EAAW,CAACC,KAAMF,GAClBG,EAAa,CAACC,MAAOJ,GACrBvE,EAAQ,eAAQ,EAAKD,MAAMC,UAC7B4E,EAAW5E,EAASiE,GAAUY,UAClB7E,EAASiE,GAAUY,SAAS3D,GAC5BlB,EAASiE,GAAUY,SAAS3D,GAE9B,GACV4D,EAAa9E,EAASkB,GAAQ2D,UACd7E,EAASkB,GAAQ2D,SAASZ,GAC1BjE,EAASkB,GAAQ2D,SAASZ,GAE5B,GAClBW,EAASG,KAAKP,GACdM,EAAWC,KAAKL,GAChB,IAAMM,EAAQ,eAAK9D,EAAS0D,GACtBK,EAAU,eAAKhB,EAAWa,GAC1BI,EAAW,2BAAOlF,EAASiE,IAAhB,IAA2BY,SAAUG,IAChDG,EAAa,2BAAOnF,EAASkB,IAAhB,IAAyB2D,SAAUI,IAChDG,EAAW,2BAAOpF,GAAP,uBAAkBiE,EAAWiB,GAA7B,cAA2ChE,EAASiE,GAApD,IACjBxE,aAAaa,QAAQ,gBAAiBf,KAAKgB,UAAUyD,IACrDvE,aAAaa,QAAQ,cAAef,KAAKgB,UAAU0D,IACnD,EAAK5D,SAAS,CAACvB,SAAUoF,OAmB7B,OACI,iD,GAzMMlG,IAAMmG,WCPxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1a06a244.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst StoreContext = React.createContext(null);\r\n\r\nexport default StoreContext;","import Rebase from 're-base'\r\nimport firebase from 'firebase'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyD7Y3vb7mNdWMUZ5OPSKaKoXwos0EMlYSM\",\r\n    authDomain: \"very-hot-burgers-c47ca.firebaseapp.com\",\r\n    databaseURL: \"https://very-hot-burgers-c47ca-default-rtdb.europe-west1.firebasedatabase.app\",\r\n})\r\n\r\nconst base = Rebase.createClass(firebaseApp.database());\r\n\r\nexport {firebaseApp};\r\nexport default base;","import Home from \"./pages/home/Home\";\r\nimport Login from \"./pages/login/Login\";\r\nimport Profile from \"./pages/profile/Profile\";\r\nimport Register from \"./pages/register/Register\";\r\nimport Messenger from \"./pages/messenger/Messenger\";\r\nimport User from \"./pages/user/user\"\r\nimport { BrowserRouter, Route} from 'react-router-dom';\r\nimport React from 'react'\r\nimport base from './base'\r\nimport StoreContext from \"./StoreContext\";\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {          \r\n        //инициализация state\r\n        allUsers: {},\r\n    };\r\n\r\n    componentDidMount(){    \r\n        //синхронизация state и БД\r\n        this.ref = base.syncState(`MySoc/allUsers`, {\r\n            context: this,\r\n            state: 'allUsers'\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        // удаление ссылки на БД\r\n        base.removeBinding(this.ref);\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log(this.state)\r\n    }\r\n\r\n    render(){\r\n\r\n        const clickRegisterButton = (userName, userEmail, userPassword) => {\r\n            const userId = new Date().valueOf(); // создание уникального Id\r\n            const newPerson = {                  // присваивание начального значения нового пользователя\r\n                userName: userName, userEmail: userEmail, userPassword: userPassword, userId: userId,\r\n                posts: [], userName: '', status: '', city: '', country: '', relationship: '',\r\n                coverUrl: '', icon: '', online: true, followers: [], messages: [],\r\n                }\r\n            const allUsers = {...this.state.allUsers};  // создание копии state allUsers\r\n            allUsers[userId] = newPerson;               // добавление нового пользователя в копию\r\n            this.setState({allUsers});                  // изменение state компоненты App\r\n            // добавление текущего пользователя в локальное хранилище\r\n            localStorage.setItem('currentPerson', JSON.stringify({...newPerson}));\r\n        }\r\n\r\n        const clickLoginButton = (thisUserEmail, thisUserPassword) => {\r\n            const users = this.state.allUsers; // создание объекта со всеми текущими пользователями\r\n            let loginFlag = true;              // создание переменной (флага) для проверки совпадения\r\n            for (var id in users) {            // начало цикла проверки совпадения\r\n                // если находится совпадение выполнится код условия\r\n                if(users[id]['userEmail'] == thisUserEmail && users[id]['userPassword'] == thisUserPassword){\r\n                    loginFlag = false;  // изменение флага совпадения\r\n                    const currentPerson = {...users[id]};  // создание копии совпадающего пользователя \r\n                    // установка копии в локальное хранилище\r\n                    localStorage.setItem('currentPerson', JSON.stringify(currentPerson)); \r\n                    const allUsers = {...this.state.allUsers}; // создание копии state allUsers\r\n                    allUsers[id].online = true;                // изменение параметра online\r\n                    allUsers[id].flag = !allUsers[id].flag;    // изменение параметра flag\r\n                    this.setState({allUsers});                 // изменение state компоненты App\r\n                    break;                                     // выход из цикла\r\n                }\r\n            }\r\n            // если совпадений не нашлось, то выводим текст оповещения\r\n            if(loginFlag){\r\n                alert('Email или Password введен неверно...') // оповещение\r\n            }\r\n        }\r\n\r\n        const onClickTopbarImg = () => {\r\n            // получение информации о текущем пользователе\r\n            const localCurrentPerson = JSON.parse(localStorage.getItem('currentPerson'));\r\n            const userId = localCurrentPerson.userId;  // получение Id текущего пользователя\r\n            const currentPerson = {};   // создание объекта пустого пользователя\r\n            // изменение действующего пользователя на пустого в локальном хранилище\r\n            localStorage.setItem('currentPerson', JSON.stringify(currentPerson));\r\n            const allUsers = {...this.state.allUsers};  // создание копии state allUsers\r\n            allUsers[userId].online = false;  // изменение параметра online \r\n            this.setState({allUsers});  // изменение state компоненты App\r\n        }\r\n\r\n        const onClickShare = (desc, img, location) => {\r\n            // получение информации о текущем пользователе\r\n            const localCurrentPerson = JSON.parse(localStorage.getItem('currentPerson'));\r\n            const userId = localCurrentPerson.userId;  // получение Id текущего пользователя\r\n            let date = new Date();  // создание переменной текущей даты и времени\r\n            // создание строки даты и времени опубликования поста\r\n            const newDate = (date.getMonth()+1)+\".\"+date.getDate()+\".\"+date.getFullYear()+\" \"+date.getHours()+\":\"+date.getMinutes(); \r\n            const newPost = {  // создание объекта нового поста\r\n                comment: 0, date: newDate, desc: desc, id: userId, like: 0,\r\n                photo: img, userId: userId, location: location, posts: [],\r\n            }\r\n            let copyPosts = this.state.allUsers[userId].posts;  // создание копии всех постов пользователя\r\n            copyPosts ? copyPosts.unshift(newPost) : copyPosts = [newPost];  // добавление поста\r\n            let allUsers = {...this.state.allUsers};  // создание копии state allUsers\r\n            allUsers[userId].posts = copyPosts;  // изменение параметра posts в копии allUsers\r\n            this.setState({allUsers});  // изменение state компоненты App\r\n            const currentPerson = this.state.allUsers[userId];  // создание копии текущего пользователя\r\n            localStorage.setItem('currentPerson', JSON.stringify(currentPerson)); // изменение localStorage\r\n        }\r\n\r\n        const onClickDelBut = (e) => {\r\n            const localCurrentPerson = JSON.parse(localStorage.getItem('currentPerson'));\r\n            const userId = localCurrentPerson.userId;\r\n            let newPosts = localCurrentPerson.posts;\r\n            newPosts.splice(e.currentTarget.getAttribute(\"index\"), 1);\r\n            const currentPerson = {...localCurrentPerson, posts: newPosts};\r\n            localStorage.setItem('currentPerson', JSON.stringify(currentPerson));\r\n            const newPerson = {...this.state.allUsers[userId], posts: newPosts};\r\n            const allUsers = { ...this.state.allUsers, [userId]: newPerson }\r\n            this.setState({allUsers});\r\n        }\r\n\r\n        const onClickLike = (e, like) => {\r\n            const localCurrentPerson = JSON.parse(localStorage.getItem('currentPerson'));\r\n            const userId = localCurrentPerson.userId;\r\n            let newPosts = localCurrentPerson.posts;\r\n            newPosts[e.currentTarget.getAttribute(\"index\")].like = like;\r\n            const currentPerson = {...localCurrentPerson, posts: newPosts}\r\n            localStorage.setItem('currentPerson', JSON.stringify(currentPerson));\r\n            const newPerson = {...this.state.allUsers[userId], posts: newPosts};\r\n            const allUsers = { ...this.state.allUsers, [userId]: newPerson }\r\n            this.setState({allUsers});\r\n        }\r\n\r\n        const onClickInputButton = (newText, word) => {\r\n            if (newText){\r\n                const localCurrentPerson = JSON.parse(localStorage.getItem('currentPerson'));\r\n                const userId = localCurrentPerson.userId;\r\n                const currentPerson = {...localCurrentPerson, [word]: newText};\r\n                localStorage.setItem('currentPerson', JSON.stringify(currentPerson));\r\n                const newPerson = {...this.state.allUsers[userId], [word]: newText};\r\n                const allUsers = { ...this.state.allUsers, [userId]: newPerson };\r\n                this.setState({allUsers});\r\n            }\r\n        }\r\n\r\n        const onClickUser = (id) => {\r\n            const currentUser = {...this.state.allUsers[id]};\r\n            localStorage.setItem('currentUser', JSON.stringify(currentUser));\r\n            const localCurrentPerson = JSON.parse(localStorage.getItem('currentPerson'));\r\n            const userId = localCurrentPerson.userId;\r\n            const flag = this.state.allUsers[userId].flag;\r\n            const newPerson = {...this.state.allUsers[userId], flag: !flag};\r\n            const allUsers = { ...this.state.allUsers, [userId]: newPerson }\r\n            this.setState({allUsers});\r\n        }\r\n\r\n        const followOnUser = () => {\r\n            const localCurrentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n            const userId = localCurrentUser.userId;\r\n            const localCurrentPerson = JSON.parse(localStorage.getItem('currentPerson'));\r\n            const personId = localCurrentPerson.userId;\r\n            let personFollowers = this.state.allUsers[personId].followers;\r\n            personFollowers = personFollowers ? personFollowers : [];\r\n            personFollowers.includes(userId) ? personFollowers.splice(personFollowers.indexOf(userId),1) : personFollowers.unshift(userId);\r\n            const newPerson = {...this.state.allUsers[personId], followers: personFollowers }\r\n            const allUsers = { ...this.state.allUsers, [personId]: newPerson }\r\n            localStorage.setItem('currentPerson', JSON.stringify(newPerson));\r\n            this.setState({allUsers});\r\n        }\r\n\r\n        const onSendClick = (userId, message) => {\r\n            const localCurrentPerson = JSON.parse(localStorage.getItem('currentPerson'));\r\n            const personId = localCurrentPerson.userId;\r\n            const newMesMy = {true: message};\r\n            const newMesYour = {false: message};\r\n            const allUsers = { ...this.state.allUsers}\r\n            let mesArrMy = allUsers[personId].messages ? \r\n                            allUsers[personId].messages[userId] ? \r\n                            allUsers[personId].messages[userId]\r\n                            : [] \r\n                        : [];\r\n            let mesArrYour = allUsers[userId].messages ? \r\n                                allUsers[userId].messages[personId] ? \r\n                                allUsers[userId].messages[personId]\r\n                                : [] \r\n                            : [];\r\n            mesArrMy.push(newMesMy);\r\n            mesArrYour.push(newMesYour);\r\n            const objMesMy = {[userId]: mesArrMy};\r\n            const objMesYour = {[personId]: mesArrYour};\r\n            const newPersonMy = {...allUsers[personId], messages: objMesMy};\r\n            const newPersonYour = {...allUsers[userId], messages: objMesYour};\r\n            const allUsersNew = {...allUsers, [personId]: newPersonMy, [userId]: newPersonYour};\r\n            localStorage.setItem('currentPerson', JSON.stringify(newPersonMy));\r\n            localStorage.setItem('currentUser', JSON.stringify(newPersonYour));\r\n            this.setState({allUsers: allUsersNew});\r\n        }\r\n\r\n        const stateAndFunc = {\r\n            ...this.state,\r\n            currentPerson: JSON.parse(localStorage.getItem('currentPerson')),\r\n            currentUser: JSON.parse(localStorage.getItem('currentUser')),\r\n            clickRegisterButton,\r\n            clickLoginButton,\r\n            onClickTopbarImg,\r\n            onClickShare,\r\n            onClickDelBut,\r\n            onClickLike,\r\n            onClickInputButton,\r\n            onClickUser,\r\n            followOnUser,\r\n            onSendClick,\r\n        }\r\n\r\n        return (\r\n            <>Hello</>\r\n            // <StoreContext.Provider value={stateAndFunc}> \r\n            //     <BrowserRouter>\r\n            //         <Route path=\"/timeline\"><Home /></Route>\r\n            //         <Route exact path=\"/\">\r\n            //             <Login \r\n            //                 clickLoginButton={clickLoginButton} \r\n            //                 currentPerson={localStorage.getItem('currentPerson') ? JSON.parse(localStorage.getItem('currentPerson'))['userEmail'] : {}} \r\n            //             />\r\n            //         </Route> \r\n            //         <Route path=\"/register\"><Register clickRegisterButton={clickRegisterButton} /></Route>\r\n            //         <Route path=\"/messenger\"><Messenger onClickTopbarImg={onClickTopbarImg} /></Route>\r\n            //         <Route path=\"/profile\"><Profile /></Route>\r\n            //         <Route path=\"/user\"><User allUsers={this.state.allUsers}/></Route>\r\n            //     </BrowserRouter>\r\n            // </StoreContext.Provider>\r\n          )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}